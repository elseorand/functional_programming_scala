package example

import scala.annotation.tailrec
import java.util.NoSuchElementException

object Lists {

  /**
   * This method computes the sum of all elements in the list xs. There are
   * multiple techniques that can be used for implementing this method, and
   * you will learn during the class.
   *
   * For this example assignment you can use the following methods in class
   * `List`:
   *
   *  - `xs.isEmpty: Boolean` returns `true` if the list `xs` is empty
   *  - `xs.head: Int` returns the head element of the list `xs`. If the list
   *    is empty an exception is thrown
   *  - `xs.tail: List[Int]` returns the tail of the list `xs`, i.e. the the
   *    list `xs` without its `head` element
   *
   *  ''Hint:'' instead of writing a `for` or `while` loop, think of a recursive
   *  solution.
   *
   * @param xs A list of natural numbers
   * @return The sum of all elements in `xs`
   */
  def sum(xs: List[Int]): Int = {
    // guard
    if(xs == null || xs.isEmpty) dchElementException("Your input is null.")
    else if(xs.isEmpty)  throw new NoSuchElementException("Your input is empty.")
    else {
      @tailrec
      def next(acc: Int, xs: List[Int]): Int = {
        if(xs.isEmpty) acc
        else if(acc < xs.head) next(xs.head, xs.tail)
        else next(acc, xs.tail)
      }

      next(xs.head, xs.tail)
    }
  }
}
