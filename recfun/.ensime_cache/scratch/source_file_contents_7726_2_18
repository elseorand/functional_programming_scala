package recfun

import scala.annotation.tailrec
import java.lang.IllegalArgumentException
import java.util.Arrays
import java.util.concurrent.atomic.LongAdder

object Main {
  def main(args: Array[String]) {
    println("Pascal's Triangle")
    for (row <- 0 to 10) {
      for (col <- 0 to row)
        print(pascal(col, row) + " ")
      println()
    }
  }

  /**
   * Exercise 1
   */
  def pascal(c: Int, r: Int): Int = {
    val minChild = if(r > (c << 1)) c else r - c
    @tailrec
    def next(counter: Int, container: Array[Int]): Int = {
      if(counter >= r) container(minChild)
      else {
        container.tail.zipWithIndex.foreach {case(e: Int, i: Int) =>
          val inc = i + 1
          container(inc) = container(inc) + container(i)
        }
        next(counter + 1, container)
      }
    }

    val container = new Array[Int](r + 1)
    Arrays.fill(container, 1)
    next(1, container)
  }

  def pascal_factorial2(c: Int, r: Int): Int = {
    val child: Int = if(r > (c << 1)) c else r - c

    @tailrec
    def next(c: Int, r: Int, accC: Int, accR: Int): Int = {
      if(c == 0) accR / accC
      else if(c == 1) accR * r / (accC * c)
      else {
        val accC2 = accC * ((c * (c - 1)) >> 1)
        val accR2 = accR * ((r * (r - 1)) >> 1)

        next(c - 2, r - 2, accC2, accR2)
      }
    }

    next(child, r, 1, 1)
  }

  def pascal_factorial(c: Int, r: Int): Int = {
    val child: Int = if(r > (c << 1)) c else r - c
    factorial(r)(child) / factorial(child)()
  }

  def factorial(n: Int)(times: Int = n): Int = {
    // guard
    if(n < times) throw new IllegalArgumentException(" n > times")
    else if(n < 0) throw new IllegalArgumentException(" n >= 0")

    @tailrec
    def next(n: Int, times: Int, acc: Int): Int = times match {
      case 0 => acc
      case _ => next(n - 1, times - 1, acc * n)
    }

    next(n, times, 1)
  }

  /**
   * Exercise 2
   */
  def balance(chars: List[Char]): Boolean = {
    // guard
    if(chars.isEmpty) return true

    @tailrec
    def next(h: Char, tail: List[Char], counter: Int): Boolean = {
      if(h == '(') next(tail.head, tail.tail, counter + 1)
      else if( h == ')') {
        if(counter == 0) false
        else next(tail.head, tail.tail, counter - 1)
      }else next(tail.head, tail.tail, counter)
    }
    next(chars.head, chars.tail, 0)
  }

  /**
   * Exercise 3
   */
  def countChange(money: Int, coins: List[Int]): Int = {
    // guard
    if(money == null || coins.isEmpty) return 0

    val sorted = coins.sorted

    case class Key(val num: Int, val numbers: Array[Int])

    val memo = Map[Key, Int]()
    val counter: LongAdder = new LongAdder()

    @tailrec
    def next(m: Int, cs: Array[Int]) = {
      // guard
      if(cs.isEmpty) counter.increment()
      else if(memo.co){

      }else if
    }

    next(money, sorted)
    counter.sum().toInt
  }

}
